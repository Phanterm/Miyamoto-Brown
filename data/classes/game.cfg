{
	player_abilities: "
	[class ability] ::
		map([map]<- get_document('data/player-abilities.cfg'),
			construct('ability', value)
		)
	",

	control_mapping: "{ControlKey -> string}<-
	get_document('data/control-scheme.cfg')
	",

	control_pressed: "def(obj miyamoto_playable player, ControlKey key) ->bool
	(keyname in player.ctrl_keys) and (keyname not in player.ctrl_prev_keys)

	where keyname = control_mapping[key]
	",

	control_held: "def(obj miyamoto_playable player, ControlKey key) ->bool
	(keyname in player.ctrl_keys) and (keyname in player.ctrl_prev_keys)

	where keyname = control_mapping[key]
	",

	ability_slot_name: "def(AbilityType ability) ->string
		str(ability)[5:]
	",

	//order abilities go in.
	ability_slot_ord: "[AbilityType] :: [
		enum ability_basic,
		enum ability_crouch,
		enum ability_special,
		enum ability_evasive,
		enum ability_ultimate,
	]",

	//how many slots each ability has.
	ability_slots: "{AbilityType->int} :: {
		enum ability_basic: 1,
		enum ability_evasive: 2,
		enum ability_special: 4,
		enum ability_ultimate: 2,
		enum ability_crouch: 2,
	}",

	get_ability_slots: "def(AbilityType t) ->int
	int<- ability_slots[t]",
}
