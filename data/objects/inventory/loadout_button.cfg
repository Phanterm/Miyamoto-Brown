{
	id: "loadout_button",
	is_strict: true,
	use_absolute_screen_coordinates: true,
	auto_anchor: true,

	properties: {
		is_active: {
			type: "bool",
			default: true,
			set: "if(value != _data, [
				set(_data, value),
				if(value and focus, set(_got_focus, level.cycle)),
			])",
		},
		grouping: { type: "string" },

		press_handler: { type: "null|function()->commands" },
		focus_handler: { type: "null|function()->commands" },

		row: { type: "int" },
		col: { type: "int" },

		icon: { type: "string|null" },
		_icon: { type: "null|obj loadout_button" },

		_cursor: { type: "null|obj button_cursor" },

		create_cursor: "def() ->commands
		execute(me,
		if(_cursor = null,
			spawn('button_cursor', {
				_width: img_w+4,
				_height: img_h+4,
				zorder: zorder-1,
			}, [
				set(_cursor, child),
				set(child.mid_x, mid_x),
				set(child.mid_y, mid_y),
			])
		)
		)
		",

		destroy_cursor: "def() ->commands execute(me, [
			remove_object(_cursor),
			set(_cursor, null),
		])",

		_time_with_focus: "int :: level.cycle - _got_focus",

		_got_focus: { type: "int", default: -1 },

		focus: {
			type: "bool",
			default: false,
			set: "if(_data != value, [
				if(value, set(_got_focus, level.cycle)),
				if(value, create_cursor(), destroy_cursor()),
				if(value and focus_handler != null, focus_handler()),

				//go through all other buttons and turn off their focus.
				if(value, map(level.chars, if(value is obj loadout_button and value != me and value.grouping = me.grouping, set(value.focus, false)))),
				set(_data, value),
			])",
		},

		_control_pressed: "def(ControlKey ctrl) ->bool
			lib.game.control_pressed(obj miyamoto_playable<- level.player, ctrl)
		",

		_shift_focus: "def(int target_row, int target_col) ->commands
		[
			set(button.focus, true)
		]
		where button = _find_focus(target_row, target_col)
		",

		_find_focus: "def(int target_row, int target_col) ->obj loadout_button

		if(exact_match != null, exact_match,
			first_row_candidate != null and last_row_candidate != null,
			if(target_col < 0, last_row_candidate, first_row_candidate),
			
			if(target_row < 0, _find_focus(last_row, target_col),
			   target_row > last_row, _find_focus(0, target_col),
			   me
			)
		)
			
			where exact_match = find(row_candidates, value.col = target_col)

			where last_row = int<- max(map(candidates, value.row))
		
			where first_row_candidate = choose(row_candidates, -value.col)
			where last_row_candidate = choose(row_candidates, value.col)
			where row_candidates = filter(candidates, value.row = target_row)
			where candidates = filter(level.chars, value is obj loadout_button and value.is_active)
		",
	},

	events: {
		create: "[
			if(focus, create_cursor()),

			if(icon != null,
			spawn('loadout_button', {
				x: x,
				y: y,
				grouping: 'icon',
				is_active: false,
				focus: false,
				row: 0,
				col: 0,
				zorder: zorder+1,
				animation: icon,
			}, [
				set(_icon, child),
			])
			)
		]",
		process: "[
		if(_icon != null,
			set(_icon.xy, xy)
		),
		if(_cursor, [
			set(_cursor.mid_xy, mid_xy),
			set(_cursor.is_active, is_active),


			if(is_active and focus and _time_with_focus > 1, [
				if(_control_pressed(enum control_down), _shift_focus(row+1, col)),
				if(_control_pressed(enum control_up), _shift_focus(row-1, col)),
				if(_control_pressed(enum control_left), _shift_focus(row, col-1)),
				if(_control_pressed(enum control_right), _shift_focus(row, col+1)),

				if((_control_pressed(enum control_attack) or _control_pressed(enum control_jump)) and press_handler != null, press_handler()),
			]),
		]),
		]",

		being_removed: "[remove_object(_cursor), remove_object(_icon)]",
	},

	animation: [
	{
	"@base": true,
	image: "inventory/inventory.png",
	duration: -1,
	},
	{
		id: "continue",
		rect: [0,0,47,31],
		frames: 1,
	},
	{
		id: "slot_ability_basic",
		frames: 1,
		x: 0,
		y: 40,
		w: 16,
		h: 16,
	},
	{
		id: "slot_ability_crouch",
		frames: 1,
		x: 16,
		y: 40,
		w: 16,
		h: 16,
	},
	{
		id: "slot_ability_special",
		frames: 1,
		x: 32,
		y: 40,
		w: 16,
		h: 16,
	},
	{
		id: "slot_ability_evasive",
		frames: 1,
		x: 48,
		y: 40,
		w: 16,
		h: 16,
	},
	{
		id: "slot_ability_ultimate",
		frames: 1,
		x: 64,
		y: 40,
		w: 16,
		h: 16,
	},

	{
		id: "ability_uppercut",
		frames: 1,
		x: 0, y: 56, w: 16, h: 16,
	},

	{
		id: "ability_punch",
		frames: 1,
		x: 16, y: 56, w: 16, h: 16,
	},

	{
		id: "ability_rising_star",
		frames: 1,
		x: 0, y: 56, w: 16, h: 16,
	},

	{
		id: "ability_daihouken",
		frames: 1,
		x: 0, y: 56, w: 16, h: 16,
	},

	{
		id: "ability_golden_needle",
		frames: 1,
		x: 0, y: 56, w: 16, h: 16,
	},

	{
		id: "ability_tenkeimon",
		frames: 1,
		x: 0, y: 56, w: 16, h: 16,
	},

	{
		id: "ability_nail_breaker",
		frames: 1,
		x: 0, y: 56, w: 16, h: 16,
	},

	{
		id: "available_ability",
		frames: 1,
		x: 262,
		y: 200,
		w: 104,
		h: 16,
	}
	],
}
