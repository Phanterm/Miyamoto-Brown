{
	id: "loadout_screen",
	is_strict: true,
	use_absolute_screen_coordinates: true,
	auto_anchor: true,

	zorder: 1000,

	properties: {
		miyamoto: "obj miyamoto_playable<- level.player",

		slot_focused: "def(AbilityType slot, int col) ->commands
		execute(me, [
			_clear_ability_buttons(),
			map(abilities, [
				spawn('loadout_button', {
					x: 164*2,
					y: 52*2 + index*18*2,
					animation: 'available_ability',
					icon: value.icon_name,
					focus: value.name = (focused_ability != null and focused_ability.name),
					grouping: 'available',
					is_active: false,
					row: index,
					col: 0,
					zorder: zorder+10,
					focus_handler: (def()->commands null),
					press_handler: (def()->commands me.ability_selected(value)),
				}, [
					add(_ability_buttons, [child]),
				])
			])
		]

		where focused_ability = miyamoto.get_slot_equipped(slot, col)
		where abilities = filter(miyamoto.learned_abilities, value.move_type = slot)
		)
		",

		_ability_buttons: { type: "[obj loadout_button]", default: [] },
		_clear_ability_buttons: "def() ->commands [
			map(_ability_buttons, remove_object(value)),
			set(_ability_buttons, []),
		]",
		

		slot_selected: "def(AbilityType slot, int col) ->commands
		if(first_ability != null,
		execute(me, [
			[set(c.is_active, false) | c <- level.chars, c is obj loadout_button, c.grouping = 'slot'],
			[set(c.is_active, true) | c <- level.chars, c is obj loadout_button, c.grouping = 'available'],
			if(focused_ability = null,
		           set(first_ability.focus, true)
			)
		]))
		where focused_ability = find(level.chars, value is obj loadout_button and value.grouping = 'available' and value.focus)
		where first_ability = find(level.chars, value is obj loadout_button and value.grouping = 'available')
		",

		ability_selected: "def(class ability ability) ->commands if(focused_slot != null, execute(me, [
			
			set(miyamoto.equipped_ability_slots[ability_slot], miyamoto.equipped_ability_slots[ability_slot] + {(focused_slot.col): ability}),
			set(focused_slot.animation, ability.icon_name),
			[set(c.is_active, true) | c <- level.chars, c is obj loadout_button, c.grouping = 'slot'],
			[set(c.is_active, false) | c <- level.chars, c is obj loadout_button, c.grouping = 'available'],
			
		]
		where ability_slot = lib.game.ability_slot_ord[focused_slot.row]
		)) where focused_slot = find(level.chars, value is obj loadout_button and value.grouping = 'slot' and value.focus)",

		_paused_chars: { type: "[custom_obj]", default: [] },
	},

	events: {
		create: "[
			[[set(c.paused, true), add(_paused_chars, [c])] | c <- level.chars, c != me],
			set(x, 0),
			set(y, 0),

			map(lib.game.ability_slot_ord,
				map(range(num_slots),
					spawn('loadout_button', {
						animation: if(ability != null,
						              ability.icon_name,
						              'slot_' + lib.game.ability_slot_name(slot)),
						x: 110 + 34*index,
						y: 103 + 79*nrow,
						focus: nrow = 0 and index = 0,
						grouping: 'slot',
						row: nrow,
						col: index,
						zorder: zorder+10,
						focus_handler: (def()->commands me.slot_focused(slot, index)),
						press_handler: (def()->commands me.slot_selected(slot, index)),
					})

                                        where ability = abilities[index]
				)
                                where abilities = miyamoto.equipped_ability_slots[slot] or {}
				where slot = value
				where nrow = index
				where num_slots = lib.game.get_ability_slots(value)
			),

			spawn('loadout_button',
			{
				x: 302*2,
				y: 194*2,
				animation: 'continue',
				grouping: 'slot',
				zorder: zorder+10,
				row: 5,
				col: 0,
				press_handler: (def()->commands remove_object(me)),
			}
			),
		]",

		being_removed: "map(spawned_children, remove_object(value)); map(_paused_chars, set(value.paused, false))",
	},

	animation: [
	{
		id: "default",
		image: "inventory/inventory.png",
		duration: -1,
		x: 106,
		y: 0,
		w: 400,
		h: 240,
	}
	]
	
}
