{
  id: "miyamoto_playable",
  is_strict: true,
  is_human: true,
  hitpoints: 4,
  zorder: 1,
  editor_info: { category: "player" },
  
  
  properties: {
    #-------EQUIPPED MOVES-------#
    equipped_ability_slots: {
      type: "{ AbilityType -> {int -> class ability} }",

      // Initialize with the abilities the player starts with.
      init: "
      {
        (enum ability_basic): { (0): lib.game.get_ability('Punch') },
        (enum ability_crouch): { (0): lib.game.get_ability('Uppercut') },
        (enum ability_special): {},
        (enum ability_evasive): { (0): lib.game.get_ability('Backjump') },
        (enum ability_ultimate): {},
      }",
    },

    // TODO Describe what this function does.
    get_slot_equipped: "def(AbilityType slot, int ncol) ->null|class ability
    if(abilities != null, abilities[ncol])
    where abilities = equipped_ability_slots[slot]
    ",
    
    // TODO: make the player learn abilities rather than them having
    // everything from the start.
    learned_abilities: "[class ability] :: lib.game.player_abilities",
    equipped_abilities: "[class ability] :: fold(map(equipped_ability_slots, map(value, value)), a+b, [])",
	
    // Indicates whether or not the player is in the middle of an attack that cannot be interrupted by walking.
    is_attacking: {type: "bool"},
	
  #-------Attack Counters and Timers-------#
    crouch_jump: {
      type: "int", 
      default: -600
    },

    standing_jump: -1000,

    punch_count: {
      type:"int",
      default: 1,
    },

    stompCount: {
      type:"int",
      default: 0,
    },

   last_attacked: {
      type:"int",
      default: 0,
    },

    // Combination function that sets the attack timer and the attack state.
    // At least until we come up with something better.
    reset_attack_timer: "def()->commands[
      set(last_attacked, cycle),
      set(is_attacking, false)
    ]",
  
  #-------Damage Based Functions-------#
    // Function that initiates an invincibility check, damage calculation, and hurt animations.
    take_damage: "def()->commands[
        //if you aren't currently invincible, take damage
        if(not self.invincible,[
        //NEED TO FIX
          take_knockback(),
          //add(me.hitpoints, -collide_with.damage), //subtract hitpoints
          if(me.hitpoints <= 0, die()),
          set(invincible, 50),
        ]),
          ]",
  
    // This starts the knockback animation that also makes the player go flying.
    take_knockback: "def()->commands[
      set(velocity_y, -500),
      set(velocity_x, (-facing * 250)),
      //if(collide_with.damage > threshold, set animation, set other animation)
      set(animation, 'hurt_weak'), //this might change depending on the amount of damage taken
    ]",
    
    // This sets the object to turn red for a brief moment and then change back to a normal color again.
    // It calls two other functions, set_red() and reset_color().    
    damage_flash: "def()->commands[
      set_red(),             // turns the enemy red
      schedule(3, reset_color()),  //back to normal
      schedule(6, set_red()),     //and red again
      schedule(9, reset_color()),  //and back to normal again
      ]",

    // This sets the red channel to full and lowers the other two channels.  
    set_red: "def()->commands[
        set(me.red, 255),
        set(me.blue, 100),
        set(me.green, 100),
        ]",

    // This sets all color channels  back to normal.
    reset_color: "def()->commands [
        set(me.red, 255),
        set(me.blue, 255),
        set(me.green, 255),
        ]",  
        
  #-------Animation Groups-------#
    hurt_animations: "['hurt_weak', 'hurt_strong']",
    backjump_animations: "['backjump', 'backjump_land']",
    stomp_animations: "['beginstomp', 'landstomp', 'endstomp', 'fallstomp']",  
    uppercut_animations: "['beginuppercut', 'uppercut', 'enduppercut']",
    kick_animations: "['flying_kick_start', 'flying_kick', 'jumping_kick_start', 'jumping_kick']",
    punch_animations: "['punch1', 'punch2', 'punch3_charge', 'punch3', 'punch3_end']",
    jump_animations: "['prejump', 'jump', 'fall']",
    guard_animations: "['guard_crouch', 'guard_stand']",
    crouch_animations: "['crouch', 'guard_crouch']",
    attack_animations: "[string]::punch_animations + uppercut_animations + kick_animations + stomp_animations",

  
  #-------Health & Stamina-------# 
  stamina: {type:"int", default: 100}, 
  
  // Takes in an ability class and subtracts from Miyamoto's stamina that ability's stamina cost.
  use_stamina_for_ability: "def(class ability ability) -> commands [
      add(stamina, -ability.stamina_cost),
    ]", 
  
  },
  
  on_create:"[
    set(is_attacking, false)
    ]",

  on_process:"[
    if('i' in ctrl_keys and 'i' not in ctrl_prev_keys, spawn('loadout_screen', {})),     // Open the Inventory Screen by pressing I.

    //------------------------------USING ATTACKS----------------------------------
    map(equipped_abilities,
      if(stamina >= value.stamina_cost and value.should_start(me), [
        debug(['START ABILITY', value.name, value.animation]),
        use_stamina_for_ability(value),
        set(is_attacking, true), // start the attack
        set(animation, value.animation),
      ])),

    //------------------------------WALKING----------------------------------
    // If you pressed a direction, the player is standing and the player is not crouching or attacking, move in that direction.
    if(ctrl_right and is_standing and animation not in crouch_animations + guard_animations + attack_animations , [
      set(facing,1),
      if (animation != 'walk', set(animation, 'walk')), //'set animation' will set on every frame, so keep in mind when activating this on command
      set(velocity_x, 300)]), 
    if(ctrl_left and is_standing and animation not in crouch_animations + guard_animations, [
      set(facing,-1),
      if (animation != 'walk', set(animation, 'walk')), 
      set(velocity_x, -300)]), 
    if((not(ctrl_left or ctrl_right))and(is_standing) and (animation in ['walk']),
      [set(animation, 'stand'), set(velocity_x, 0), debug('walk velocity reset')]),
      
      
    //-------------------------------CROUCHING-------------------------------
    if ((ctrl_down and self.animation in ['stand','crouch','walk']),[
      set(animation, 'crouch'),
      set(velocity_x, 0)
    ]),  
    if ((ctrl_left and self.animation in crouch_animations + guard_animations),[
      set(facing,-1), 
      set(velocity_x, 0)
    ]),
    if ((ctrl_right and self.animation in crouch_animations + guard_animations),[
      set(facing,1), 
      set(velocity_x, 0)
    ]),
    //-------------------------------GUARDING-------------------------------
  
    // Guard Stand is when you press D and are not attacking  or crouching
    if (('d' in ctrl_keys and (not ctrl_down) and self.is_standing and self.animation not in attack_animations + jump_animations),[
      set(animation, 'guard_stand'),
      set(velocity_x, 0),    
      ]),
    // Guard Crouch happens when you press D while crouching.
    if (('d' in ctrl_keys and ctrl_down and self.is_standing and self.animation in crouch_animations + guard_animations),[
      set(animation, 'guard_crouch'), 
      set(velocity_x, 0),  
     ])
  ]",
  

//-------------------------------JUMPING---------------------------------   
  // If you press D while jumping, you perform a stomp.   
  on_process_jump:"if('d' in ctrl_keys, set(animation,'beginstomp'))",
  
  on_process_fall:"if('d' in ctrl_keys, set(animation,'beginstomp'))",
  //on_process_prejump:"if('d' in ctrl_keys, set(animation,'beginstomp'))",
  on_ctrl_jump: "[
    if(is_standing and not ctrl_up and self.animation not in ['backjump, jump'], [  
      //TODO: check the animation changing back to 'walk' or 'stand' on jumping at a ledge and continuing to jump without the proper animation. 
      if (animation not in jump_animations, set(animation, 'prejump')),
        set(velocity_y, crouch_jump), //work on Miyamoto falling straight down upon walking off of an edge.
      if(self.animation ='crouch', 
        set(velocity_y,crouch_jump)), 
    ]),
  ]",

  on_leave_prejump_anim: "[if(ctrl_jump and not ctrl_down and not ctrl_up, [set(velocity_y,standing_jump)])]",

    // TODO Rework this logic. Maybe move elsewhere.
  on_enter_backjump_anim: "[
    set(velocity_y, -600),
    set(velocity_x, (-facing * 490)),
  ]",

//-----------------------------COLLISIONS----------------------------------
  on_collide_object_body: "[
    [if(arg.collide_with_area = 'projectile', 
      take_damage(), //The player takes damage
      )],
    [if(arg.collide_with_area = 'enemy', 
      take_damage(), //The Player takes damage
      )] ]",


//---------------------ON END ANIMATION ---------------------------------------
  //--ATTACK ANIMATIONS
  // begin_uppercut -> uppercut
  on_end_beginuppercut_anim:"set(animation, 'uppercut')",

  // uppercut -> end_uppercut
  on_end_uppercut_anim:"set(animation, 'enduppercut')",

  // end_uppercut -> crouch
  on_end_enduppercut_anim:"set(animation, 'crouch')",

  // flying_kick_start -> flying_kick
  on_end_flying_kick_start_anim:"set(animation,'flying_kick')",
  
  // jumping_kick_start -> jumping_kick
  on_end_jumping_kick_start_anim:"set(animation,'jumping_kick')",
  
  // punch_3_charge -> punch3, spawn punch3 projectile
  on_end_punch3_charge_anim: "[
    set(animation,'punch3'), reset_attack_timer(),
    spawn('miyamoto_playable.punch3_proj', 
      mid_x+15*facing, 
      mid_y-11, 
      {facing:facing, velocity_x:1500*facing})
  ]",

  // punch3 -> punch3_end. Reset attack
  on_end_punch3_anim: "[set(animation,'punch3_end'), 
    set(velocity_x, 0),
    reset_attack_timer()
  ]",

  // punch3_end -> stand
  on_end_punch3_end_anim: "set(animation,'stand')",

  // risingstar_start -> risingstar
  on_end_risingstar_start_anim: "[set(animation,'risingstar')]",
  
  // risingstar -> risingstar_end, no horizontal movement.
  on_end_risingstar_anim: "[
    set(animation,'risingstar_end'), 
    set(velocity_x, 0)
  ]",
  
  //CHARGE UP PUNCH; TO COME LATER
  //on_end_punch3_charge_anim: "[set(animation,'punch3'), 
//    reset_attack_timer(),  
//    set(velocity_x, 
//    500*facing)
// ]",

  on_end_axehandle_anim: "[
    spawn('miyamoto_playable.axehandle_proj',
      mid_x-10*facing,
      mid_y-45,
      {facing:facing,velocity_x:1000*facing,velocity_y:1000}),
      set(animation,'axehandle_hang')
  ]",
  
  //on_end_axehandle_hang_anim: "set(animation,'fall')",
  on_end_anim:"if(animation in ['punch1','punch2','punch3_charge'], if(is_standing, set(animation,'stand'),set(animation,'jump'), set(animation, 'prejump'), set(animation, 'crouch'), set(animation, 'guard_crouch'), set(animation, 'guard_stand')))",
  on_end_walk_anim: "set(animation,animation)", //continues the animation
  on_end_crouch_anim:"if(not(ctrl_down),set(animation,'stand'))",
  on_end_guard_stand_anim:"if(not('d' in ctrl_keys),set(animation,'stand'))",
  on_end_guard_crouch_anim:"if(ctrl_down and not('d' in ctrl_keys),set(animation,'crouch'))",
  on_end_jump_anim:"set(animation,'fall')",
  on_end_prejump_anim:"set(animation,'jump')",
  on_end_backjump_anim:"set(animation,'backjump_land')",
  
  
  on_collide_feet:"[
    if(self.animation not in stomp_animations and ['backjump, backjump_land'], 
      [set(animation,'stand'),set(velocity_x, 0), debug ('velocity reset stand')]),
    if(self.animation in ['fallstomp'],
      [set(animation,'landstomp'),reset_attack_timer(),set(velocity_y,0)])
      ]",
        
//Modify the velocity_y below to change the speed of the fall.
  on_end_beginstomp_anim:"[set(animation,'fallstomp'),set(velocity_y,2000), set(velocity_x, 0)]",
  on_end_landstomp_anim:"[
    if(stompCount > 3,
      [set(animation,'endstomp'),set(stompCount, 0),reset_attack_timer()]),
    if(stompCount <= 3,
      [ 
      set(stompCount, stompCount+1), 
      set(animation, 'landstomp'),
      reset_attack_timer(),
      ]),
  ]",
  on_leave_fallstomp_anim: "[ 
    spawn('miyamoto_playable.stomp_proj',mid_x-50,mid_y-25,{facing:facing*facing}), //TODO: Make it so these do not interfere with Miyamoto's other projectiles.
    spawn('miyamoto_playable.stomp_proj',mid_x+50,mid_y-25,{facing:facing*facing-1}),
      ]",

  on_end_fallstomp_anim: "if(is_standing, [set(animation,'stand'),reset_attack_timer()])",      
  on_end_endstomp_anim:"set(animation,'stand')",
  
  animation: [
    {
    "@base": true,
    image: "playable/miyamoto-sheet.png",
    accel_y: 40,
    solid_area: [20,32,10,5],
    body_area:[20,32,10,5],
    pad: 3,
    },
    {
    id: "stand",
    rect: [1,1,32,33],
    frames:1,
    frames_per_row: 1,
    velocity_x: 0,
    },  
    {
    id: "walk",
    rect: [1,37,32,69],
    frames:4,
    frames_per_row: 4,
    duration: 10,
    },
    {
    id: "prejump",
    rect: [36,1,67,33],
    frames:1,
    frames_per_row: 1,
    duration: 5,
    },
    {
    id: "backjump",
    rect: [176,73,207,105],
    frames:1,
    frames_per_row: 1,
    duration: 1,
    },
    {
    id: "backjump_land",
    rect: [211,73,242,105],
    frames:1,
    frames_per_row: 1,
    duration: 5,
    },
    {
    id: "jump",
    rect: [71,1,102,33],
    frames:1,
    frames_per_row: 1,
    duration:80,
    //we need to probably set the hitboxes or area to be smaller, or move the animation down to the feet somehow.
    },
    {
    id: "fall",
    rect: [71,1,102,33],
    frames:1,
    frames_per_row: 1,
    velocity_x: 0,
    //we need to probably set the hitboxes or area to be smaller, or move the animation down to the feet somehow.
    },
    {
    id: "crouch",
    rect:[1,145,32,177],
    frames:1,
    frames_per_row: 1,
    velocity_x: 0,
    },
    
    //ATTACK ANIMATIONS*********************************
    
    {
    id: "punch1",
    rect: [1,73,32,105],
    frames:2,
    frames_per_row: 2,
    duration: 4,
    },
    {
    id: "punch2",
    rect: [106,73,137,105],
    frames:2,
    frames_per_row: 2,
    duration: 4,
    },
    {
    id: "punch3_charge",
    rect: [36,109,67,141],
    frames:1,
    frames_per_row: 1,
    duration: 3,
    },
    {
    id: "punch3",
    rect: [246,109,277,141],
    frames:1,
    frames_per_row: 1,
    duration: 10,
    },
    {
    id: "super_punch",
    rect: [71,109,102,141],
    frames:6,
    frames_per_row: 6,
    duration: 2,
    },
    {
    id: "punch3_end",
    rect: [246,109,277,141],
    velocity_x: 0,
    frames:3,
    frames_per_row: 3,
    duration: 4,
    },
    {
    id: "risingstar_start",
    rect: [1,366,32,403],
    solid_area: [20,37,10,5],
    attack_area: "all", 
    frames:2,
    frames_per_row: 2,
    duration: 2,
    },
    {
    id: "risingstar",
    rect: [71,366,102,403],
    solid_area: [20,37,10,5],
    attack_area: "all", 
    frames:1,
    frames_per_row: 1,
    duration: 20,
    },
    {
    id: "risingstar_end",
    rect: [71,366,102,403],
    solid_area: [20,37,10,5],
    frames:2,
    frames_per_row: 2,
    duration: 2,
    },
    {
    id: "beginuppercut",
    rect: [1,325,32,362],
    solid_area: [20,37,10,5],
    frames:2,
    frames_per_row: 2,
    duration: 2,
    },
    {
    id: "uppercut",
    rect: [71,325,102,362],
    solid_area: [20,37,10,5],
    frames:1,
    frames_per_row: 1,
    duration: 15,
    },
    {
    id: "enduppercut",
    rect: [106,325,137,362],
    solid_area: [20,37,10,5],
    frames:1,
    frames_per_row: 1,
    duration: 5,
    },
    {
    id: "flying_kick_start",
      rect: [176,1,207,33],
    attack_area: "all", 
    frames:1,
    frames_per_row: 1,
    duration: 6,
    },
    {
    id: "flying_kick",
      rect: [211,1,242,33],
    attack_area: "all", 
    frames:1,
    frames_per_row: 1,
    duration: 6,
    },
    {
    id: "jumping_kick_start",
      rect: [107,1,137,33],
    frames:1,
    frames_per_row: 1,
    duration: 6,
    },
    {    
    id: "jumping_kick",
      rect: [141,1,172,33],
    frames:1,
    frames_per_row: 1,
    duration: 6,
    },
    {
    id: "axehandle",
    rect: [176,222,207,254],
    solid_area: [20,37,10,5],
    frames:3,
    frames_per_row: 3,
    duration: 3,
    },
    {
    id: "axehandle_hang",
    rect: [246,222,277,254],
    solid_area: [20,37,10,5],
    frames:1,
    frames_per_row: 2,
    duration: 15,
    },
    {
    id: "beginstomp", // When the command is activated, there is an ever-so-slight delay wherein the character is suspended in midair before actually falling down toward the ground.
      rect: [1,407,32,439],
    frames:1,
    frames_per_row: 1,
    duration: 4,
    velocity_x: 0,
    },
    {
    id: "fallstomp", // This is a lightning-fast drop to the ground. Will add afterimages at some point.
      rect: [37,407,67,439],
    frames:1,
    frames_per_row: 1,
    duration: 1,
    body_area: 'null',
    },
    {
    id: "landstomp", // The moment the player lands on the ground with a stomp. 
        rect: [71,407,102,439],
    frames:2,
    frames_per_row: 2,
    duration: 2,
    body_area: 'null',
    },
    {
    id: "endstomp", // The end of the stomp animation.
        rect: [141,407,172,439],
    frames:4,
    frames_per_row: 4,
    duration: 6,
    },
    {
    id: "guard_stand",
    rect: [71,145,102,177],
    frames:1,
    frames_per_row: 1,
    velocity_x: 0,
    },  
    {
    id: "guard_crouch",
    rect: [36,145,67,177],
    frames:1,
    frames_per_row: 1,
    velocity_x: 0,
    },  
  //HURT AND DEATH ANIMATIONS
    {
    id: "hurt_weak", 
        rect: [211,37,242,69],
    frames:1,
    frames_per_row: 1,
    duration: 1,
    },
    {
    id: "hurt_strong", 
        rect: [176,37,207,69],
    frames:1,
    frames_per_row: 1,
    duration: 1,
    },
    {
    id: "hurt_wallbounce", 
        rect: [246,37,277,69],
    frames:1,
    frames_per_row: 1,
    duration: 1,
    },
    {
    id: "death", 
        rect: [141,37,172,69],
    frames:1,
    frames_per_row: 1,
    duration: 1,
    },
  ],
  object_type: [
    {
    id:"punch_proj",
    on_create:"schedule(4,die())",
    on_collide_object:"die()", //if it hits something, get rid of the punch
    prototype: ["player_attack"],
    
    properties: {
      attack_name: "string::'punch1'", //Todo maybe refactor to enums
    },
    
    animation: [{
      id:"punch_proj_normal",
      image: "playable/miyamoto-sheet.png",
      rect: [1,109,10,118],
      area: "all",
      attack_area: "all", 
      damage: 1, //how much damage it does. Can change later. Maybe stronger punches can do more damage.
      }],
    },
    
    {
    id:"punch2_proj",
    on_create:"schedule(4,die())",
    on_collide_object:"die()", //if it hits something, get rid of the punch
    prototype: ["player_attack"],
    
    properties: {
      attack_name: "string::'punch2'",
    },
    
    animation: [{
      id:"punch2_proj_normal",
      image: "playable/miyamoto-sheet.png",
      rect: [14,109,23,118],
      area: "all",
      attack_area: "all", 
      damage: 1, //how much damage it does. Can change later. Maybe stronger punches can do more damage.
      }],
    },
    
    {
    id:"punch3_proj",
    on_create:"schedule(4,die())",
    on_collide_object:"die()", //if it hits something, get rid of the punch
    prototype: ["player_attack"],
    
    properties: {
      attack_name: "string::'punch3'",
    },
    
    animation: [{
      id:"punch3_proj_normal",
      image: "playable/miyamoto-sheet.png",
      rect: [1,122,13,134],
      area: "all",
      attack_area: "all", 
      damage: 1, //how much damage it does. Can change later. Maybe stronger punches can do more damage.
      }],
    },
    
    {
    id:"uppercut_proj",
    on_create:"schedule(10,die())",
    prototype: ["player_attack"],
    
    properties: {
      attack_name: "string::'uppercut_projectile'",
    },
    
    animation: [{
      id:"uppercut_proj_normal",
      image: "playable/miyamoto-sheet.png",
      rect: [211,325,220,362],
      frames: 5,
      frames_per_row:5,
      pad:3,
      duration: 2,
      area: "all",
      attack_area: "all", 
      damage: 1, //how much damage it does. Can change later. Maybe stronger punches can do more damage.
      }],
    },
    {
    id:"axehandle_proj",
    on_create:"[schedule(9,die()),add(me.velocity_y,level.player.velocity_y)]",
    prototype: ["player_attack"],
    
    properties: {
      attack_name: "string::'axehandle'",
    },
    
    animation: [{
      id:"axehandle_proj",
      image: "playable/miyamoto-sheet.png",
      rect: [176,503,207,534],
      frames: 7,
      frames_per_row:7,
      pad:3,
      duration: 1,
      area: "all",
      attack_area: "all", 
      damage: 1, //how much damage it does. Can change later. Maybe stronger punches can do more damage.
      }],
    },
    {
    id:"axehandle_proj_start",
    on_create:"[schedule(5,die()),add(me.velocity_y,level.player.velocity_y)]",
    prototype: ["player_attack"],
    
    properties: {
      attack_name: "string::'axehandle'",
    },

    animation: [{
      id:"axehandle_proj_start",
      image: "playable/miyamoto-sheet.png",
      rect: [1,503,32,535],
      frames: 5,
      frames_per_row:5,
      pad:3,
      duration: 1,
      area: "all",
      attack_area: "none", 
      damage: 1, //how much damage it does. Can change later. Maybe stronger punches can do more damage.
      }],
    },
    {
    id:"stomp_proj",
    on_create:"schedule(15,die())",
    prototype: ["player_attack"],
    
    properties: {
      attack_name: "string::'emperor_stomp'",
    },
    
    animation: [{
      id:"stomp_proj",
      image: "playable/miyamoto-sheet.png",
      rect: [1,443,46,499],
      frames: 7,
      pad:3,
      duration: 2,
      area: "all",
      attack_area: "all", 
      damage: 5, //how much damage it does. Can change later. Maybe stronger punches can do more damage.
      }],
    }
    
  ]
}
