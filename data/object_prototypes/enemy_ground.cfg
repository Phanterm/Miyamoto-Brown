

{
  id: "enemy_ground",
  prototype: ["force_list"],
  is_strict: true,
    
properties: {

//The get hurt function subtracts the current object's hitpoints by the attacking object's damage property
//It then does a check to see if the hitpoints have reached 0.
//If it has, then the current object dies.
get_hurt: "def(obj player_attack attacker, string collide_with_area) -> commands
      [add(hitpoints, -attacker.damage),
        damage_flash(),
        handle_knockback(attacker),
        ]",

handle_knockback: "def(obj player_attack attacker) -> commands
            //debug('handling knockback ' + attacker.type + ' ' + attack_list[attacker.attack_name].velocity_x + ' ' + attack_list[attacker.attack_name].velocity_y)
            [set(velocity_x, attack_list[attacker.attack_name].velocity_x),
             set(velocity_y, attack_list[attacker.attack_name].velocity_y),
            ]",  

handle_knockback_death: "def(obj player_attack attacker) -> commands
            //debug('handling knockback death' + attacker.type + ' ' + attack_list[attacker.attack_name].velocity_x + ' ' + attack_list[attacker.attack_name].velocity_y)
            [set(velocity_x, attack_list[attacker.attack_name].velocity_x),
             set(velocity_y, attack_list[attacker.attack_name].velocity_y),
            ]",              
  
on_die: "[
    set(hitpoints, 1),
    animation('death_light'),
    debug('bam I worked'),
    sound('deathtest.wav'),
    schedule(30,set(hitpoints,0)),
    ]", 

    
//This sets the object to turn red for a brief moment and then change back to a normal color again
//It calls two other functions, red() and reset_color()      
damage_flash: "def() -> commands [
  set_flash(),             // turns the enemy red
  schedule(3, reset_color()),  //back to normal
  schedule(6, set_flash()),     //and red again
  schedule(9, reset_color()),  //and back to normal again
  ]",
  
//get_stun: "def() -> commands [
//  
//  ]",

//This sets the red channel to full and lowers the other two channels  
set_flash: "def() -> commands [
      set(me.brightness, 1023),
    ]",

//This sets all color channels  back to normal
reset_color: "def() -> commands [
    set(me.red, 255),
    set(me.blue, 255),
    set(me.green, 255),
    ]",

/*--DROP ITEM LOGIC--*/
  //Let's say that every enemy has an equal chance to drop an item. 1d20 is dice notation. 1 20-sided dice, for example.
  //if this were to change for each enemy or for specific drops, that could be in the individual enemy config.
  //Step 1: Roll a random number.
  //Step 2: Compare that to the drop chance (let's say for now that it's 25%)
  //step 3: If it's within range, spawn the item!
//roll_for_items: "def() -> commands [if(1d20 < 5, spawn('health_boost', mid_x, mid_y, facing, set(child.velocity_y, -100)),)]",
},

//When this enemy blows up, spawn an explosion object for effect
on_collide_object_body: "[
    if(arg.collide_with_area = 'attack' and arg.collide_with is obj player_attack, 
      get_hurt(arg.collide_with, arg.collide_with_area)
    ), //if you are hit by a bullet, the get_hurt() function is called
  ]",
    
/*--SPAWNED OBJECTS--*/
  //Objects listed here are ones created by the parent object, and do not exist elsewhere. In this case, we have a bullet
  //Anything that uses a child.*  property affects one of these objects.



    }